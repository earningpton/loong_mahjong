name: üêâ Build Web Version

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Add permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-web:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üì¶ Setup Emscripten
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: latest
        actions-cache-folder: 'emsdk-cache'

    - name: üîç Verify Emscripten installation
      run: |
        emcc --version
        echo "Emscripten installed successfully!"

    - name: üî® Build web version
      run: |
        echo "üêâ Building Mahjong Loong for web..."

        # Clone Raylib
        git clone --depth 1 https://github.com/raysan5/raylib.git

        # Build Raylib library first (C files)
        echo "üì¶ Building Raylib for web..."
        cd raylib/src
        make PLATFORM=PLATFORM_WEB -B
        cd ../../

        # Now compile our C++ game with the Raylib library
        echo "üî® Compiling game..."

        # Check if required files exist before compilation
        echo "üîç Pre-compilation checks:"
        ls -la main.cpp || echo "‚ùå main.cpp not found"
        ls -la Graphics/ || echo "‚ùå Graphics folder not found"
        ls -la Sounds/ || echo "‚ùå Sounds folder not found"
        ls -la raylib/src/libraylib.web.a || echo "‚ùå Raylib web library not found"
        echo ""

        # Attempt compilation
        if emcc main.cpp \
          -std=c++17 \
          -O2 \
          -I./raylib/src \
          -L./raylib/src \
          -lraylib.web \
          -DPLATFORM_WEB \
          -s USE_GLFW=3 \
          -s ASYNCIFY \
          -s TOTAL_MEMORY=134217728 \
          -s ALLOW_MEMORY_GROWTH=1 \
          -s FORCE_FILESYSTEM=1 \
          -s ASSERTIONS=1 \
          -s LEGACY_GL_EMULATION=1 \
          --preload-file Graphics \
          --preload-file Sounds \
          -o mahjong_loong.html; then
          echo "‚úÖ Primary compilation successful!"
        else
          echo "‚ùå Primary compilation failed, trying fallback..."

          # Fallback: compile with Raylib source files directly
          emcc main.cpp \
            raylib/src/rcore.c \
            raylib/src/rshapes.c \
            raylib/src/rtextures.c \
            raylib/src/rtext.c \
            raylib/src/rmodels.c \
            raylib/src/raudio.c \
            raylib/src/utils.c \
            -std=c++17 \
            -O2 \
            -I./raylib/src \
            -I./raylib/src/external \
            -DPLATFORM_WEB \
            -DGRAPHICS_API_OPENGL_ES2 \
            -s USE_GLFW=3 \
            -s ASYNCIFY \
            -s TOTAL_MEMORY=134217728 \
            -s ALLOW_MEMORY_GROWTH=1 \
            -s FORCE_FILESYSTEM=1 \
            -s ASSERTIONS=1 \
            -s LEGACY_GL_EMULATION=1 \
            --preload-file Graphics \
            --preload-file Sounds \
            -o mahjong_loong.html

          if [ $? -eq 0 ]; then
            echo "‚úÖ Fallback compilation successful!"
          else
            echo "‚ùå Both compilation attempts failed!"
            exit 1
          fi
        fi

    - name: üìã List generated files
      run: |
        echo "Generated files:"
        ls -la mahjong_loong.*
        echo ""
        echo "File sizes:"
        du -h mahjong_loong.*

    - name: üìÅ Prepare deployment files
      run: |
        # Debug: Check what files were actually created
        echo "üîç Checking build output:"
        ls -la
        echo ""
        echo "üîç Looking for game files:"
        ls -la mahjong_loong.* || echo "No mahjong_loong files found"
        echo ""

        # Create a clean deployment directory
        mkdir -p deploy

        # Copy files with better error handling
        if [ -f "index.html" ]; then
          cp index.html deploy/
          echo "‚úÖ Copied index.html"
        else
          echo "‚ùå index.html not found"
        fi

        if [ -f "mahjong_loong.html" ]; then
          cp mahjong_loong.html deploy/
          echo "‚úÖ Copied mahjong_loong.html"
        else
          echo "‚ùå mahjong_loong.html not found - this is the main issue!"
        fi

        if [ -f "mahjong_loong.js" ]; then
          cp mahjong_loong.js deploy/
          echo "‚úÖ Copied mahjong_loong.js"
        else
          echo "‚ùå mahjong_loong.js not found"
        fi

        if [ -f "mahjong_loong.wasm" ]; then
          cp mahjong_loong.wasm deploy/
          echo "‚úÖ Copied mahjong_loong.wasm"
        else
          echo "‚ùå mahjong_loong.wasm not found"
        fi

        if [ -f "mahjong_loong.data" ]; then
          cp mahjong_loong.data deploy/
          echo "‚úÖ Copied mahjong_loong.data"
        else
          echo "‚ùå mahjong_loong.data not found"
        fi

        if [ -f "README.md" ]; then
          cp README.md deploy/
          echo "‚úÖ Copied README.md"
        else
          echo "‚ùå README.md not found"
        fi

        echo ""
        echo "üìÅ Final deployment directory contents:"
        ls -la deploy/
        echo ""
        echo "üìä File sizes:"
        du -h deploy/* || echo "No files in deploy directory"

    - name: üöÄ Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: deploy
        keep_files: false

    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mahjong-loong-web
        path: |
          index.html
          mahjong_loong.html
          mahjong_loong.js
          mahjong_loong.wasm
          mahjong_loong.data
        retention-days: 30

    - name: üéâ Build summary
      run: |
        echo "üêâ Mahjong Loong web build completed!"
        echo ""
        echo "üìÅ Generated files:"
        echo "   - mahjong_loong.html (main game page)"
        echo "   - mahjong_loong.js (JavaScript loader)"
        echo "   - mahjong_loong.wasm (WebAssembly binary)"
        echo "   - mahjong_loong.data (game assets)"
        echo ""
        echo "üåê Your game will be available at:"
        echo "   https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        echo ""
        echo "üéÆ Direct game link:"
        echo "   https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/mahjong_loong.html"